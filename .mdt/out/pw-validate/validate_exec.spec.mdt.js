// GENERATED BY MDT â€” REVIEW
// scenario: validate_exec
// generatedAt: 2025-08-23T16:47:00.729Z

import { firefox, chromium, webkit } from 'playwright-core';
import { PNG } from 'pngjs';
import pixelmatch from 'pixelmatch';
import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'node:fs';
import { resolve } from 'node:path';

/**
 * Ensure a directory exists by creating it (recursively) if necessary.
 *
 * Attempts to create the directory at `p` using recursive creation. On failure
 * the function logs a warning and swallows the error (it does not throw).
 *
 * @param {string} p - Filesystem path of the directory to ensure exists.
 */
function ensureDir(p) { try { mkdirSync(p, { recursive: true }); } catch (e) { console.warn('[MDT] ensureDir failed', e?.message || String(e)); }}

/**
 * Attempt to launch a Playwright browser engine, retrying across engines and rounds.
 *
 * Tries to launch each engine in order [firefox, chromium, webkit] for up to `retries` rounds
 * (0..retries). Between rounds it waits with a linear backoff of 200ms * (roundIndex + 1).
 *
 * @param {number} [retries=2] - Number of retry rounds (each round attempts all engines once).
 * @returns {Promise<import('playwright').Browser>} A launched Playwright Browser instance.
 * @throws {Error} The last encountered launch error if all attempts fail.
 */
async function launchWithRetry(retries = 2) {
	let last;
	for (let i = 0; i <= retries; i++) {
		for (const engine of [firefox, chromium, webkit]) {
			try {
				return await engine.launch();
			} catch (e) {
				last = e;
			}
		}
		await new Promise(r => setTimeout(r, 200 * (i + 1)));
	}
	throw last;
}

/**
 * Launches a Playwright browser, opens a page with the provided viewport, navigates to "about:blank", and returns a minimal visual result.
 *
 * If the environment variable `MDT_PW_SKIP` is set to `'1'`, the function returns `{ visual: null, skipped: true }` without launching a browser.
 *
 * @param {string} name - Logical device name for context (not used to select the browser).
 * @param {Object} viewport - Playwright-style viewport descriptor (e.g. `{ width, height, deviceScaleFactor, isMobile?, hasTouch? }`).
 * @return {Promise<{ visual: any|null, skipped?: boolean }>} Resolves with an object containing `visual` (currently `null`) and `skipped` when the run was skipped.
 * @throws Rethrows any error encountered while launching the browser, creating the page, or navigating.
 */
async function runDevice(name, viewport) {
	if (process.env.MDT_PW_SKIP === '1') { return { visual: null, skipped: true }; }
	let browser;
	try {
		browser = await launchWithRetry(2);
		const page = await browser.newPage();
		await page.setViewportSize(viewport);
		for (const p of ["about:blank"]) { await page.goto(p, { waitUntil: 'networkidle' }); }
		
		let visual = null;
		
		return { visual };
	} catch (err) {
		console.error('[MDT] runDevice failed', err && (err.stack || err.message || String(err)));
		throw err;
	} finally {
		if (browser) { try { await browser.close(); } catch (e) { console.warn('[MDT] close failed', e?.message || String(e)); } }
	}
}

describe('validate_exec', () => {
	it('desktop', async () => {
		await runDevice('desktop', { width: 1366, height: 768, deviceScaleFactor: 1 });
	});
	it('mobile', async () => {
		await runDevice('mobile', { width: 390, height: 844, deviceScaleFactor: 2, isMobile: true, hasTouch: true });
	});
});
